name: Go

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.23"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Build
        run: go build -v ./...

      - name: Prepare test environment
        run: |
          mkdir -p testdata
          mkdir -p config/testdata
          echo '{"server":{"port":"5070","log_level":"info","bind_addr":"127.0.0.1"}}' > testdata/test_config.json
          echo '{"server":{"port":"5070","log_level":"info","bind_addr":"127.0.0.1"}}' > config/testdata/test_config.json

      - name: Test
        run: go test -v -count=1 -race ./...

      - name: Test Detailed (on failure)
        if: failure()
        run: |
          echo "Running detailed tests for each package..."
          for pkg in $(go list ./...); do
            echo "Testing package: $pkg"
            go test -v -count=1 $pkg
          done

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Lint
        run: golangci-lint run --timeout=5m

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - name: Prepare test environment
        run: |
          mkdir -p testdata
          mkdir -p config/testdata
          echo '{"server":{"port":"5070","log_level":"info","bind_addr":"127.0.0.1"}}' > testdata/test_config.json
          echo '{"server":{"port":"5070","log_level":"info","bind_addr":"127.0.0.1"}}' > config/testdata/test_config.json

      - name: Generate coverage report
        run: go test -count=1 -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate detailed coverage (on failure)
        if: failure()
        run: |
          echo "Running detailed coverage for each package..."
          for pkg in $(go list ./...); do
            echo "Testing package: $pkg"
            go test -v -count=1 -coverprofile=coverage_$pkg.out $pkg
          done

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          fail_ci_if_error: false
